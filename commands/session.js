// ==================== commands/session.js ====================
import { contextInfo } from '../system/contextInfo.js';

import sessionManager from "../system/sessionManager.js";

async function session(devask, m, msg, args, context) {
    const { sender, sessionId, session, isSessionOwner, isSessionSudo } = context;
    const senderNumber = sender.split('@')[0];

    // V√©rifier si l'utilisateur a une session
    if (!session) {
      return devask.sendMessage(m.chat, {
        text: "‚ùå Vous n'avez pas de session configur√©e.\n\n_Contactez l'administrateur pour configurer votre session._",
        contextInfo: {
          ...contextInfo,
          mentionedJid: [m.sender]
        }
      }, { quoted: m });
    }

    // Seuls owner et sudo peuvent modifier
    if (!isSessionOwner && !isSessionSudo) {
      return devask.sendMessage(m.chat, {
        text: "üö´ Seuls l'owner et les sudo de cette session peuvent la modifier.",
        contextInfo: {
          ...contextInfo,
          mentionedJid: [m.sender]
        }
      }, { quoted: m });
    }

    const subCommand = args[0]?.toLowerCase();

    // Afficher les infos de la session
    if (!subCommand || subCommand === "info") {
      const sudoList = session.sudo?.join(", ") || "Aucun";
      return devask.sendMessage(m.chat, {
        text: `*üì± Informations de session*\n\n` +
              `üè∑Ô∏è Nom: ${session.name}\n` +
              `üë§ Owner: ${session.ownerNumber}\n` +
              `‚öôÔ∏è Pr√©fixe: ${session.prefix}\n` +
              `üîí Mode: ${session.mode}\n` +
              `üë• Sudo: ${sudoList}\n` +
              `üÜî Session ID: ${session.sessionId}\n\n` +
              `*Commandes disponibles:*\n` +
              `‚Ä¢ ${session.prefix}session prefix <nouveau>\n` +
              `‚Ä¢ ${session.prefix}session mode <public|private>\n` +
              `‚Ä¢ ${session.prefix}session addsudo <num√©ro>\n` +
              `‚Ä¢ ${session.prefix}session delsudo <num√©ro>`,
              contextInfo: {
          ...contextInfo,
          mentionedJid: [m.sender]
        }
      }, { quoted: m });
    }

    // Changer le pr√©fixe
    if (subCommand === "prefix") {
      const newPrefix = args[1];
      if (!newPrefix) {
        return devask.sendMessage(m.chat, {
          text: `‚ùå Usage: ${session.prefix}session prefix <nouveau_pr√©fixe>\n\nExemple: ${session.prefix}session prefix #`,
          contextInfo: {
          ...contextInfo,
          mentionedJid: [m.sender]
        }
        }, { quoted: m });
      }

      if (newPrefix.length > 3) {
        return devask.sendMessage(m.chat, {
          text: "‚ùå Le pr√©fixe doit faire maximum 3 caract√®res.",
          contextInfo: {
          ...contextInfo,
          mentionedJid: [m.sender]
        }
        }, { quoted: m });
      }

      sessionManager.updatePrefix(sessionId, newPrefix);
      return devask.sendMessage(m.chat, {
        text: `‚úÖ Pr√©fixe mis √† jour: *${newPrefix}*\n\n_Les commandes utilisent maintenant: ${newPrefix}commande_`,
        contextInfo: {
          ...contextInfo,
          mentionedJid: [m.sender]
        }
      }, { quoted: m });
    }

    // Changer le mode
    if (subCommand === "mode") {
      const newMode = args[1]?.toLowerCase();
      if (!newMode || !["public", "private"].includes(newMode)) {
        return devask.sendMessage(m.chat, {
          text: `‚ùå Usage: ${session.prefix}session mode <public|private>\n\n` +
                `‚Ä¢ *public*: Tout le monde peut utiliser le bot\n` +
                `‚Ä¢ *private*: Seuls owner et sudo peuvent utiliser le bot`,
                contextInfo: {
          ...contextInfo,
          mentionedJid: [m.sender]
        }
        }, { quoted: m });
      }

      sessionManager.updateMode(sessionId, newMode);
      return devask.sendMessage(m.chat, {
        text: `‚úÖ Mode mis √† jour: *${newMode}*\n\n` +
              (newMode === "private" 
                ? "_Seuls l'owner et les sudo peuvent maintenant utiliser le bot._"
                : "_Tout le monde peut maintenant utiliser le bot._"),
         contextInfo: {
          ...contextInfo,
          mentionedJid: [m.sender]
        }
      }, { quoted: m });
    }

    // Ajouter un sudo
    if (subCommand === "addsudo") {
      if (!isSessionOwner) {
        return devask.sendMessage(m.chat, {
          text: "üö´ Seul l'owner peut ajouter des sudo.",
          contextInfo: {
          ...contextInfo,
          mentionedJid: [m.sender]
        }
        }, { quoted: m });
      }

      let sudoNumber = args[1];
      if (!sudoNumber) {
        // V√©rifier si message cit√©
        if (m.quoted) {
          sudoNumber = m.quoted.sender.split('@')[0];
        } else {
          return devask.sendMessage(m.chat, {
            text: `‚ùå Usage: ${session.prefix}session addsudo <num√©ro>\n\nOu r√©pondez √† un message.`,
               contextInfo: {
          ...contextInfo,
          mentionedJid: [m.sender]
        }
                      }, { quoted: m });
        }
      }

      // Nettoyer le num√©ro
      sudoNumber = sudoNumber.replace(/[^\d]/g, '');
      
      if (sessionManager.cleanNumber(session.ownerNumber) === sudoNumber) {
        return devask.sendMessage(m.chat, {
          text: "‚ùå L'owner est d√©j√† admin de sa session.",
          contextInfo: {
          ...contextInfo,
          mentionedJid: [m.sender]
        }
        }, { quoted: m });
      }

      sessionManager.addSudo(sessionId, sudoNumber);
      return devask.sendMessage(m.chat, {
        text: `‚úÖ *${sudoNumber}* ajout√© aux sudo de cette session.`,
        contextInfo: {
          ...contextInfo,
          mentionedJid: [m.sender]
        }
      }, { quoted: m });
    }

    // Retirer un sudo
    if (subCommand === "delsudo") {
      if (!isSessionOwner) {
        return devask.sendMessage(m.chat, {
          text: "üö´ Seul l'owner peut retirer des sudo.",
          contextInfo: {
          ...contextInfo,
          mentionedJid: [m.sender]
        }
        }, { quoted: m });
      }

      let sudoNumber = args[1];
      if (!sudoNumber) {
        if (m.quoted) {
          sudoNumber = m.quoted.sender.split('@')[0];
        } else {
          return devask.sendMessage(m.chat, {
            text: `‚ùå Usage: ${session.prefix}session delsudo <num√©ro>\n\nOu r√©pondez √† un message.`,
            contextInfo: {
          ...contextInfo,
          mentionedJid: [m.sender]
        }
          }, { quoted: m });
        }
      }

      sudoNumber = sudoNumber.replace(/[^\d]/g, '');
      sessionManager.removeSudo(sessionId, sudoNumber);
      
      return devask.sendMessage(m.chat, {
        text: `‚úÖ *${sudoNumber}* retir√© des sudo de cette session.`,
        contextInfo: {
          ...contextInfo,
          mentionedJid: [m.sender]
        }
      }, { quoted: m });
    }

    // Commande inconnue
    return devask.sendMessage(m.chat, {
      text: `‚ùå Sous-commande inconnue: *${subCommand}*\n\n` +
            `Utilisez ${session.prefix}session info pour voir les commandes disponibles.`,
            contextInfo: {
          ...contextInfo,
          mentionedJid: [m.sender]
        }
    }, { quoted: m });
  }
 
export default {
name: "session",
run: session
};